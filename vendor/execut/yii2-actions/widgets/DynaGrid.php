<?php
/**
 * Created by PhpStorm.
 * User: execut
 * Date: 11/15/17
 * Time: 12:14 PM
 */

namespace execut\actions\widgets;

use execut\actions\action\adapter\viewRenderer\DynaGridRow;
use execut\actions\widgets\dynaGrid\ToolbarButton;
use execut\yii\jui\WidgetTrait;
use kartik\export\ExportMenu;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use \kartik\dynagrid\DynaGrid as KartikDynaGrid;
use yii\web\JsExpression;

class DynaGrid extends KartikDynaGrid
{
    use WidgetTrait;
    public $dataProvider = null;
    public $storage = KartikDynaGrid::TYPE_DB;
    public $filter = null;
    public $toolbarButtons = [];

    public function init()
    {
        if ($this->filter !== null) {
            $columns = array_values($this->filter->getGridColumns());
            if ($this->dataProvider === null) {
                $this->dataProvider = $this->filter->search();
            }
        } else {
            $columns = $this->columns;
        }
//        foreach ($exportColumns as &$column) {
//            unset($column['visible']);
//        }

        $id = $this->getId();
        if (\yii::$app && \yii::$app->request->post('exportFull_' . $id . '-export')) {
            ini_set('max_execution_time', 1200);
        }

        if (empty($this->options['id'])) {
            $this->options['id'] = $id;
        }

        $this->columns = $columns;

        foreach ($this->toolbarButtons as $key => $button) {
            if (is_array($button)) {
                if (!empty($button['class'])) {
                    $class = $button['class'];
                } else {
                    $class = ToolbarButton::class;
                }

                $button = \yii::createObject($class, $button);
                $this->toolbarButtons[$key] = $button;
            }
        }

        if ($this->gridOptions === null) {
            $this->gridOptions = [];
        }

        $this->gridOptions = ArrayHelper::merge([
            'class' => GridView::class,
            'responsive' => false,
            'responsiveWrap' => false,
            'rowOptions' => function ($row) {
                if ($row instanceof DynaGridRow) {
                    return $row->getRowOptions();
                }
            },
            'panel' => false,
            'floatHeader' => true,
            'floatHeaderOptions' => [
                'top' => 50,
                'zIndex' => 989,
                'autoReflow' => true,
                'top' => new JsExpression(<<<JS
function(table) {
    if ($('.container-logo').length !== 0 && $('.container-logo').css('position') !== 'fixed') {
        return 0;
    }

    var menusSelectors = ['.navbar', '#search-tabs', '#header-menu'],
        result = 0;
    for (var key = 0; key < menusSelectors.length; key++) {
        if ($(menusSelectors[key]).length) {
            result += $(menusSelectors[key]).height();
        }
    }
    
    return result;
}
JS
                )
            ],
            'export' => [
                'fontAwesome' => true,
                'itemsAfter'=> [
                    '<li role="presentation" class="divider"></li>',
                    '<li class="dropdown-header">Export All Data</li>',
                ]
            ],
            'toggleDataOptions' => [
                'maxCount' => 100000,
            ],
            'filterModel' => $this->filter,
            'toolbar' => $this->getToolbarConfig(),
            'dataProvider' => $this->dataProvider,
        ], $this->gridOptions);

        parent::init(); // TODO: Change the autogenerated stub
    }


    public function getGridId() {
        if (!empty($this->gridOptions['id'])) {
            return $this->gridOptions['id'];
        }

        return $this->id . '-grid';
    }

    /**
     * @inheritdoc
     */
    public function run()
    {
        if (method_exists($this, 'initWidget')) {
            $this->initWidget();
        }

        if (empty($this->gridOptions['options']['id'])) {
            $this->gridOptions['options']['id'] = $this->id;
        }

        Html::addCssClass($this->options, $this->getDefaultCssClass());
        $this->_registerBundle();
        if (!empty($this->filter->errors)) {
            echo Html::errorSummary($this->filter);
        }

        if (!empty($this->gridOptions['class'])) {
            $widgetClass = $this->gridOptions['class'];
        } else {
            $widgetClass = GridView::class;
        }

        echo Html::tag('div', $widgetClass::widget($this->gridOptions), $this->options);
    }
    protected function initWidget()
    {
        parent::initWidget();
        $this->initFullExportMenu();
    }

    protected function initFullExportMenu(): void
    {
        $columns = $this->gridOptions['columns'];
        $fullExportMenu = ExportMenu::widget([
            'id' => $this->id . '-export',
            'options' => [
                'id' => $this->id . '-export',
            ],
            'dataProvider' => $this->dataProvider,
            'columns' => $columns,
            'showColumnSelector' => true,
            'target' => ExportMenu::TARGET_BLANK,
            'batchSize' => 1000,
            'fontAwesome' => true,
            'asDropdown' => false,
            'dynagrid' => true,
            'dynagridOptions' => [
                'options' => ['id' => $this->id],
                'gridOptions' => [
                    'class' => $this->gridOptions['class'],
                    'columns' => $columns,
                ],
            ],
            'dropdownOptions' => [
                'label' => '<i class="glyphicon glyphicon-export"></i> Full'
            ],
        ]);
        $this->gridOptions['export']['itemsAfter'][] = $fullExportMenu;
    }

    public function getToolbarConfig() {
        $result = [];
        foreach ($this->toolbarButtons as $key => $button) {
            $result[$key] = [
                'content' => $button->render($this)
            ];
        }

        return $result;
    }
}