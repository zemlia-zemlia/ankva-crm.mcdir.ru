<?php
/**
 * Created by PhpStorm.
 * User: execut
 * Date: 3/13/19
 * Time: 12:00 PM
 */

namespace execut\actions\models;


use detalika\goods\models\MergeRelation;
use detalika\goods\models\MergeRelations;
use execut\crudFields\fields\Field;
use yii\base\Model;
use yii\mutex\Mutex;

class MassDelete extends Model
{
    public $owner = null;
    protected $_deleteRelationsModels = null;
    public $deleteErrors = [];
    public $isEmulation = false;
    public $batchLimit = 10000;

    public function load($data, $formName = null)
    {
        if ($formName === null) {
            $formName = $this->formName();
        }

        if (!empty($data[$formName]) && !empty($data[$formName]['deleteRelationsModels'])) {
            $this->setDeleteRelationsModels($data[$formName]['deleteRelationsModels']);
        }

        return parent::load($data, $formName); // TODO: Change the autogenerated stub
    }

    public function setDeleteRelationsModels($modelsData) {
        $models = $this->getDefaultDeleteRelationsModels();
        foreach ($modelsData as $key => $modelsDatum) {
            $models[$key]->load($modelsDatum, '');
        }

        $this->_deleteRelationsModels = $models;

        return $this;
    }

    public function getDeleteRelationsModels() {
        if ($this->_deleteRelationsModels !== null) {
            return $this->_deleteRelationsModels;
        }

        return $this->_deleteRelationsModels = $this->getDefaultDeleteRelationsModels();
    }

    public function getDefaultDeleteRelationsModels() {
        $result = [];
        foreach ($this->owner->getRelations() as $relation) {
            $result[$relation->name] = $relation->getDeleteModel();
        }

        return $result;
    }

    public function getCount() {
        return $this->getQuery()->count();
    }

    public function getQuery() {
        $dp = $this->owner->search();

        return $dp->query;
    }

    public function attributeLabels()
    {
        return [
            'deleteRelationsModels' => 'Удалить связанные записи:',
            'count' => 'Количество удаляемых записей',
            'isEmulation' => 'Эмуляция удаления',
        ];
    }

    public function rules()
    {
        return [
            [['deleteRelationsModels', 'isEmulation'], 'safe'],
        ];
    }

    public function isDeletingInProgress() {
        /**
         * @var Mutex $mutex
         */
        $mutex = \yii::$app->mutex;
        $mutexKey = $this->getMutexKey();
        if (!$mutex->acquire($mutexKey)) {
            return true;
        }

        $mutex->release($mutexKey);

        return false;
    }

    public function getDeletedTotalCount() {
        return \yii::$app->cache->get($this->getDeletedTotalCountKey());
    }

    public function getDeletedCurrentCount() {
        return \yii::$app->cache->get($this->getDeletedCurrentCountKey());
    }

    public function delete() {
        \yii::$app->db->close();
        $pid = pcntl_fork();
        if ($pid == -1) {
            return false;
        } else if ($pid) {
            return true;
        }

        ini_set('max_execution_time', 0);
        /**
         * @var Mutex $mutex
         */
        $mutex = \yii::$app->mutex;
        $mutexKey = $this->getMutexKey();
        if (!$mutex->acquire($mutexKey)) {
            return false;
        }

        $result = 0;
        $query = $this->getQuery();
        \yii::$app->cache->set($this->getDeletedTotalCountKey(), $query->count());
        \yii::$app->cache->delete($this->getStopKey());
        $currentCount = 0;
        $this->clearDeleteErrors();
        foreach ($query->batch($this->batchLimit) as $models) {
            foreach ($models as $model) {
                \yii::$app->cache->set($this->getDeletedCurrentCountKey(), $currentCount++);
                $mergeRelation = new MergeRelations();
                $mergeRelation->article = $model;
                $relations = [];
                foreach ($this->getDeleteRelationsModels() as $name => $deleteRelationsModel) {
                    if ($deleteRelationsModel->is_delete) {
                        $relations[$name] = [
                            'action_id' => MergeRelation::ACTION_DELETE,
                        ];
                    }
                }
                $mergeRelation->relations = $relations;
                if (!$mergeRelation->validate()) {
                    foreach ($mergeRelation->errors as $errors) {
                        foreach ($errors as $error) {
                            $this->addDeleteError([
                                'model' => (string) $model,
                                'error' => $error
                            ]);
                        }
                    }
                } else {
                    if ($this->isEmulation || $mergeRelation->delete()) {
                        $result++;
                    }
                }

                if ($this->isStop()) {
                    break 2;
                }
            }
        }

        \yii::$app->cache->set($this->getDeletedCurrentCountKey(), 0);
        $mutex->release($mutexKey);

        return $result;
    }

    public function addDeleteError($error) {
        \yii::$app->cache->set('delete-errors-' . self::class, array_merge($this->getDeleteErrors(), [$error]));
    }

    public function clearDeleteErrors() {
        return \yii::$app->cache->delete('delete-errors-' . self::class);
    }

    public function getDeleteErrors() {
        $errors = \yii::$app->cache->get('delete-errors-' . self::class);
        if (empty($errors)) {
            return [];
        }

        return $errors;
    }

    /**
     * @return string
     */
    protected function getDeletedTotalCountKey(): string
    {
        return 'deleted-total-count-' . $this->owner->className();
    }

    /**
     * @return string
     */
    protected function getDeletedCurrentCountKey(): string
    {
        return 'deleted-current-count-' . $this->owner->className();
    }

    public function isStop() {
        return \yii::$app->cache->get($this->getStopKey());
    }

    public function stop() {
        \yii::$app->cache->set($this->getStopKey(), 1);
        return $this;
    }

    public function getDeletedProgress() {
        if (!$this->isDeletingInProgress()) {
            return 100;
        }

        $deletedTotalCount = $this->getDeletedTotalCount();
        if ($deletedTotalCount == 0) {
            return 0;
        }

        return round($this->getDeletedCurrentCount() / $deletedTotalCount * 100, 2);
    }

    /**
     * @return string
     */
    protected function getMutexKey(): string
    {
        $mutexKey = 'mass-delete-3-' . $this->owner->className();
        return $mutexKey;
    }

    /**
     * @return string
     */
    protected function getStopKey(): string
    {
        return 'delete-stop-' . $this->owner->className();
    }
}